El Proyecto

En 2º se entregaba un proyecto cuando acababas las prácticas.
Tenías 40h de dedicación para el proyecto (lo cual es poco 💩)

Hay que hacer un informe en el cual determinas la empresa, logo, temática, competidores, inversión, etc.
(Modelo de datos, punto 0 - X entre gastos/beneficios, donde se cruzan)

Para llegar al 10 tenias que mostrar el prototipo (el programa)


[PRIMERO] - [SEGUNDO]

Vamos a ver la Arquitectura, de qué hace falta para poder montar la aplicación.

Front End - 
digital ocean (tipo amazon, azure)
nginx (El servidor HTTP definitivo) - Apache se quedó fuera hace mucho
metes el index.html
el proveedor de servicios (digital ocean) te da una IP (ejemplo: 8.7.9.12), pero tu quieres un determinas el dominio (www.loquesea.es), necesitas un DNS.
como por ejemplo duckdns
ejemplO: hostinguer:
La dirección pregnative.es es la dirección 8.7.9.12.
HTML estatico = no accede a datos.

Back-End -
Ahora haces un login, entonces abres un servidor en azure y despliegas tu aplicación back end alli.
La petición va a una base de datos (supabase, tipo postgres)!! 

Por ejemplo, subes una imágen, ¿Dónde va?
Un servicio que se llama S3 - por ejemplo

Hay que hacer un "mapa de aplicación", donde dibujas la aplicación para tener una idea más cercana a la realidad

EN SEGUNDO VEMOS ASP.NET

-----
proxmox (Máquina virtual - recomendación del profesor)

CURL
Postman

Protocolo HTTP:
CURL (es una aplicación) le ha manado ese string (el body de una petición , heads, status, etc...)








nginx -> servidor HTTP, html, css y js


Servidor App:
    - ASP (El mismo fichero servía tanto para front como para Back)
    - php (clon de ASP con más cosas)
    - Springboot (Java) - Cambio de paradigma. Servidor de datos puro y duro. 
    - ASP.NET (Nada que ver con ASP) - C# - Mezcla de HTML y C#
    - nodeJS -> se programa en JavaScript
    - go (Google) (Puede lanzar MUCHOS threads, tiene un propio planificador the threads)
    - Python (DJango) - Nadie hace un server con python xD


Hace falta:
    - Servidor de BBDD
        - Microsoft SQL server
        - PostgreSQL (Prioridad) -> Supabase (para crear una, te regala 0,5gb)
        - Oracle  (El mejor y más caro)
        - Casandra (Lo usó primero Facebook, NOSQL) -> Hoy en día su sucessor es 
        
Compartir archivos:
    - S3 -> API para meter archivos gordos. el GB en una bbdd es muy caro, y en S3 es céntimos al mes.
    - Minio (servidor propio)
        
- ???? - Si tengo varios servidores, tener una RAM común entre ellos y poder acceder a datos más rápidamente

- ???? - Chat con vídeo en tiempo real entre varios usuarios





CLIENTE --> Chrome, firefox...

(Back End)
Load Balancer (o "ingress") -> nginx 
máquinas virtuales conectadas entre si mediante una red virtual
un nodo es un ordenador físico o virtual que está corriendo en algun lugar (linux, windows, mac o lo que sea)

Al acceder al Load Balancer, "se reparte el bacalao"
-> http://wasabi.com -> el nginix va a un sitio -> a los servidores donde está alojado mi página web html+css+JavaScript (un string)

-> http://api.wasabi.com -> el nginix va a otro sitio

-> http://wasabi.com/user/32 (path) -> el nginix va a otro sitio

Caché -> se utiliza para no molestar a la base de datos constantemente
(El "id" 75, estos son sus datos en un json -> Si vuelves a pedirlos, lo tengo en caché)

Microservicios: cachitos de aplicación.

MQTT (Suscripción)
- Broke
- Publishers (publican en un topic)
- Suscribers (Se suscriben a esos mensajes de manera total o parcial)

WEBRTC -> juno

